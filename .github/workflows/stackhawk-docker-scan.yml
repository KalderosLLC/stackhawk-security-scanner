name: StackHawk Hourly Security Scans (Docker)

on:
  schedule:
    # Run every hour at minute 0 (e.g., 9:00, 10:00, 11:00, etc.)
    - cron: '0 * * * *'
  workflow_dispatch:
    # Allow manual triggering

jobs:
  stackhawk-bulk-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # 2 hours timeout for all scans
    
    steps:
    - name: üîç Checkout repository
      uses: actions/checkout@v4
      
    - name: üê≥ Pull StackHawk Docker image
      run: |
        echo "ü¶Ö Pulling StackHawk Docker image..."
        docker pull stackhawk/hawkscan:latest
        
    - name: üöÄ Run bulk security scans
      env:
        HAWK_API_KEY: ${{ secrets.HAWK_API_KEY }}
      run: |
        echo "ü¶Ö Starting StackHawk bulk security scans..."
        chmod +x ./bulk-scan-runner.sh
        
        # Create a Docker-compatible version of the scan runner
        cat > docker-scan-runner.sh << 'EOF'
        #!/bin/bash
        
        echo "üîç StackHawk Docker Bulk Scan Runner"
        echo "=============================="
        
        total_count=0
        success_count=0
        failure_count=0
        declare -a successful_scans=()
        declare -a failed_scans=()
        start_time=$(date +%s)
        
        log_file="bulk-scan-results-$(date +%Y%m%d-%H%M%S).log"
        echo "üìù Logging results to: $log_file"
        
        # Function to log with timestamp
        log_with_timestamp() {
            local message="$1"
            local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
            echo "[$timestamp] $message" | tee -a "$log_file"
        }
        
        # Function to run scan for a single config
        run_single_scan() {
            local config_file="$1"
            local app_name="${config_file%.yml}"
            app_name="${app_name#stackhawk-}"
            
            echo "ü¶Ö Processing: $app_name"
            echo "   Config: $config_file"
            log_with_timestamp "Starting scan for $app_name using $config_file"
            
            if [ ! -f "$config_file" ]; then
                echo "   ‚ùå Configuration file not found: $config_file"
                log_with_timestamp "ERROR: Configuration file not found: $config_file"
                failed_scans+=("$app_name (file not found)")
                ((failure_count++))
                return 1
            fi
            
            echo "   üöÄ Running scan..."
            if docker run --rm -v "$(pwd):/hawk:rw" -e HAWK_API_KEY="$HAWK_API_KEY" stackhawk/hawkscan "$config_file" >> "$log_file" 2>&1; then
                echo "   ‚úÖ SUCCESS: $app_name scan completed"
                log_with_timestamp "SUCCESS: $app_name scan completed successfully"
                successful_scans+=("$app_name")
                ((success_count++))
                return 0
            else
                echo "   ‚ùå FAILED: $app_name scan failed"
                log_with_timestamp "FAILURE: $app_name scan failed"
                failed_scans+=("$app_name")
                ((failure_count++))
                return 1
            fi
        }
        
        log_with_timestamp "Starting bulk scan process with Docker"
        echo "üîÑ Starting bulk scan for all StackHawk configurations..."
        
        # Loop through all stackhawk-*.yml files
        for config_file in stackhawk-*.yml; do
            if [ -f "$config_file" ]; then
                ((total_count++))
                run_single_scan "$config_file"
                echo ""
                sleep 2
            fi
        done
        
        # Generate final report
        end_time=$(date +%s)
        execution_time=$((end_time - start_time))
        execution_minutes=$((execution_time / 60))
        execution_seconds=$((execution_time % 60))
        
        echo "=================================="
        echo "üèÅ BULK SCAN COMPLETED"
        echo "=================================="
        echo "üìä SUMMARY:"
        echo "   Total configurations: $total_count"
        echo "   Successful scans: $success_count"
        echo "   Failed scans: $failure_count"
        if [ $total_count -gt 0 ]; then
            echo "   Success rate: $(( success_count * 100 / total_count ))%"
        fi
        echo "   Execution time: ${execution_minutes}m ${execution_seconds}s"
        
        if [ ${#successful_scans[@]} -gt 0 ]; then
            echo "‚úÖ SUCCESSFUL SCANS:"
            for scan in "${successful_scans[@]}"; do
                echo "   ‚úì $scan"
            done
        fi
        
        if [ ${#failed_scans[@]} -gt 0 ]; then
            echo "‚ùå FAILED SCANS:"
            for scan in "${failed_scans[@]}"; do
                echo "   ‚úó $scan"
            done
        fi
        
        log_with_timestamp "Bulk scan completed - Total: $total_count, Success: $success_count, Failed: $failure_count"
        
        if [ $failure_count -eq 0 ]; then
            echo "üéâ All scans completed successfully!"
            exit 0
        else
            echo "‚ö†Ô∏è  Some scans failed. Check the details above and in the log file."
            exit 1
        fi
        EOF
        
        chmod +x docker-scan-runner.sh
        ./docker-scan-runner.sh
        
    - name: üìä Upload scan results
      uses: actions/upload-artifact@v4
      if: always()  # Upload results even if scans fail
      with:
        name: stackhawk-scan-results-${{ github.run_number }}
        path: bulk-scan-results-*.log
        retention-days: 30
